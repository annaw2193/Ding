[{"/home/annajwang/htn/Ding/frontend/src/index.js":"1","/home/annajwang/htn/Ding/frontend/src/App.js":"2","/home/annajwang/htn/Ding/frontend/src/reportWebVitals.js":"3","/home/annajwang/htn/Ding/frontend/src/Input/InputTags.js":"4","/home/annajwang/htn/Ding/frontend/src/Input/Input.js":"5"},{"size":500,"mtime":1610772178555,"results":"6","hashOfConfig":"7"},{"size":623,"mtime":1610853914501,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1610772178555,"results":"9","hashOfConfig":"7"},{"size":1676,"mtime":1610853914505,"results":"10","hashOfConfig":"7"},{"size":6789,"mtime":1610855717617,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"wucgfi",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"/home/annajwang/htn/Ding/frontend/src/index.js",[],"/home/annajwang/htn/Ding/frontend/src/App.js",[],"/home/annajwang/htn/Ding/frontend/src/reportWebVitals.js",[],"/home/annajwang/htn/Ding/frontend/src/Input/InputTags.js",[],"/home/annajwang/htn/Ding/frontend/src/Input/Input.js",["23"],"import React from \"react\";\nimport Checkbox from \"./Checkbox.js\";\nimport Button from \"react-bootstrap/Button\";\nimport axios from \"axios\";\nimport Container from \"react-bootstrap/Container\";\n\nconst OPTIONS = [\"Text\", \"Images\", \"Audio\"];\n\nclass Input extends React.Component {\n  state = {\n    checkboxes: OPTIONS.reduce((options, option) => ({\n      ...options,\n      [option]: false,\n    })),\n\n    num: 1,\n    downloads: [],\n    words: [],\n<<<<<<< HEAD\n    audios: [],\n    selectD: []\n=======\n\n    audios: [],\n>>>>>>> 72423c3d7dc7e6797cd657ce718c25d736eec1e8\n  };\n\n  // Handles changes in checkbox\n  handleCheckboxChange = (changeEvent) => {\n    const { name } = changeEvent.target;\n\n    this.setState((prevState) => ({\n      checkboxes: {\n        ...prevState.checkboxes,\n        [name]: !prevState.checkboxes[name],\n      },\n    }));\n  };\n\n  // Handles changes in number input\n  handleNumChange = (e) => {\n    this.setState({ num: e.target.value });\n  };\n\n  handleSelectImage = (e) => {\n    // e.preventDefault();\n    console.log(e.target.key)\n    console.log(`target value: ${this.state.downloads[e.target.value]}`)\n    this.setState({ selectD: e.target.value})\n  }\n\n  // Dynamically creates checkboxes\n  createCheckbox = (option) => (\n    <Checkbox\n      label={option}\n      isSelected={this.state.checkboxes[option]}\n      onCheckboxChange={this.handleCheckboxChange}\n      key={option}\n    />\n  );\n\n  //  Handles form submit events\n  handleFormSubmit = (formSubmitEvent) => {\n    formSubmitEvent.preventDefault();\n\n    const audio = new Audio(\"/ding.mp3\");\n    audio.play();\n\n<<<<<<< HEAD\n    // console.log(this.state.selectD)\n\n    this.setState({\n\n    downloads: [],\n    words: [],\n    audios: [],\n    // selectD: []\n  });\n=======\n    this.setState({\n      checkboxes: OPTIONS.reduce((options, option) => ({\n        ...options,\n        [option]: false,\n      })),\n\n      num: 1,\n\n      downloads: [],\n\n      words: [],\n\n      audios: [],\n    });\n>>>>>>> 72423c3d7dc7e6797cd657ce718c25d736eec1e8\n\n    let imageCheck = false;\n    let audioCheck = false;\n    let textCheck = false;\n\n    let numImage = 0;\n    let numAudio = 0;\n    let numText = 0;\n\n    Object.keys(this.state.checkboxes)\n      .filter((checkbox) => this.state.checkboxes[checkbox])\n      .forEach((checkbox) => {\n        if (checkbox === \"Images\") {\n          imageCheck = true;\n        }\n        if (checkbox === \"Audio\") {\n          audioCheck = true;\n        }\n        if (checkbox === \"Text\") {\n          textCheck = true;\n        }\n      });\n\n    // produces the number of elements to be generated\n    if (imageCheck && textCheck && audioCheck) {\n      numImage = Math.floor(Math.random() * this.state.num + 1);\n      numAudio = Math.floor(Math.random() * (this.state.num - numImage) + 1);\n      numText = this.state.num - numImage - numAudio;\n    } else if (imageCheck && textCheck && !audioCheck) {\n      numImage = Math.floor(Math.random() * this.state.num + 1);\n      numText = this.state.num - numImage;\n    } else if (imageCheck && !textCheck && audioCheck) {\n      numImage = Math.floor(Math.random() * this.state.num + 1);\n      numAudio = this.state.num - numImage;\n    } else if (!imageCheck && textCheck && audioCheck) {\n      numAudio = Math.floor(Math.random() * this.state.num + 1);\n      numText = this.state.num - numAudio;\n    } else {\n      if (imageCheck) {\n        numImage = this.state.num;\n      } else if (textCheck) {\n        numText = this.state.num;\n      } else if (audioCheck) {\n        numAudio = this.state.num;\n      } \n    }\n\n    // Call backend for image, word, and text information\n    if (imageCheck) {\n      axios.get(`http://localhost:5000/images/${numImage}`, {}).then(\n        function (response) {\n          var download = [];\n          for (let i = 0; i < numImage; i++) {\n            download.push(JSON.parse(response[\"data\"])[i][\"download_url\"]);\n          }\n          return this.setState({ downloads: download });\n        }.bind(this)\n      );\n    }\n    if (textCheck) {\n      axios.get(`http://localhost:5000/words/${numText}`, {}).then(\n        function (response) {\n          var wordArray = response[\"data\"];\n          return this.setState({ words: wordArray });\n        }.bind(this)\n      );\n    }\n    if (audioCheck) {\n      axios.get(`http://localhost:5000/audio/${numAudio}`, {}).then(\n        function (response) {\n          var audioLinkMP3 = [];\n          var audioLinkOGG = [];\n          for (let i = 0; i < numAudio; i++) {\n            audioLinkMP3.push(\n              JSON.parse(response[\"data\"])[i][\"preview-lq-mp3\"]\n            );\n            audioLinkOGG.push(\n              JSON.parse(response[\"data\"])[i][\"preview-lq-ogg\"]\n            );\n          }\n          return this.setState({ audios: audioLinkMP3, audioLinkOGG });\n        }.bind(this)\n      );\n    }\n  };\n\n  // Dynamically create checkboxes\n  createCheckboxes = () => OPTIONS.map(this.createCheckbox);\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row mt-5\">\n          <div className=\"col-sm-12\">\n            <form onSubmit={this.handleFormSubmit}>\n              <div className=\"checkboxBox\">{this.createCheckboxes()}</div>\n              <br />\n              <div className=\"num-elements\">\n                <input\n                  type=\"number\"\n                  min=\"1\"\n                  placeholder=\"# Prompts\"\n                  max=\"50\"\n                  step=\"1\"\n                  value={this.state.num}\n                  onChange={this.handleNumChange}\n                ></input>\n              </div>\n\n              <div className=\"form-group mt-2\">\n                <Button type=\"submit\" className=\"btn generate\" size=\"lg\" block>\n                  DING\n                </Button>\n                {this.state.downloads.map((image, i) => (\n                  <div key={i} onMouseUp={this.handleSelectImage}>\n                    <img src={image} alt=\"DingImage\"></img>\n                  </div>\n                ))}\n                {this.state.words.map((word, i) => (\n                  <div key={i}>\n                    <p>{word}</p>\n                  </div>\n                ))}\n                {this.state.audios.map((audioLinkMP3, audioLinkOGG, i) => (\n                  <div key={i}>\n                    <audio controls preload=\"auto\">\n                      <source src={audioLinkMP3} type=\"audio/mpeg\"></source>\n                      <source src={audioLinkOGG} type=\"audio/ogg\"></source>\n                      Your browser does not support the audio element.\n                    </audio>\n                  </div>\n                ))}\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  // Dynamically create checkboxes\n  createCheckboxes = () => OPTIONS.map(this.createCheckbox);\n}\n\nexport default Input;\n",{"ruleId":null,"fatal":true,"severity":2,"message":"24","line":19,"column":1},"Parsing error: Unexpected token\n\n\u001b[0m \u001b[90m 17 | \u001b[39m    downloads\u001b[33m:\u001b[39m []\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 18 | \u001b[39m    words\u001b[33m:\u001b[39m []\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 19 | \u001b[39m\u001b[33m<<\u001b[39m\u001b[33m<<\u001b[39m\u001b[33m<<\u001b[39m\u001b[33m<\u001b[39m \u001b[33mHEAD\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    | \u001b[39m\u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 20 | \u001b[39m    audios\u001b[33m:\u001b[39m []\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 21 | \u001b[39m    selectD\u001b[33m:\u001b[39m []\u001b[0m\n\u001b[0m \u001b[90m 22 | \u001b[39m\u001b[33m===\u001b[39m\u001b[33m===\u001b[39m\u001b[33m=\u001b[39m\u001b[0m"]